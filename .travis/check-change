#!/usr/bin/env bash
# HOW TO USE THIS SCRIPT IN .travis.yml
#   > CHANGED=`.travis/check-change` && if [[ "$CHANGED" = changed ]]; then exit 0; fi
# There are three possible output categories, and desired effects in this script
#  1. exit 0; stdout "changed"   -> Run the remaining scripts.
#  2. exit 0; stdout "unchanged" -> Skip all the following scripts. And make it a "Success" status
#  3. exit !0; stdout *;      -> Stop the process with a "Fail" status.
# For categories 1 and 2, the usage will be evaluated as follows:
#   > CHANGED="changed" && if [[ "$CHANGED" = "unchanged" ]]; then exit 0; fi
# `exit 0` is called, then stop the process with "Success" status.
# If the statement returns 0, it will continue the process.
# For 3., the usage will be evaluated like this, and bash operator `&&` will
# short-circuit the logic and propagate exit code.
#   > false && ...
# Statement that returned non-zero code will stop the process with a "Fail" status.

# Everything that is normally printed to `stdout` in the script will be redirected to `stderr`
# which will be visible in tty/Travis log.
# Outputs that is printed to `fd 3` will be redirected to `stdout`,
# which will be finally assigned to a variable `$SKIP`
exec 3>&1 1>&2 # fd 3 = fd 1; fd 1 = fd 2

function return_to_travis {
    STRATEGY=$1
    echo "${STRATEGY}" >&3
    exit 0
}
function unchanged { return_to_travis "unchanged" ; }
function changed { return_to_travis "changed" ; }

echo "TRAVIS_EVENT_TYPE=${TRAVIS_EVENT_TYPE}"
echo "TRAVIS_BRANCH=${TRAVIS_BRANCH}"
echo "TRAVIS_COMMIT=${TRAVIS_COMMIT}"
echo "TRAVIS_COMMIT_RANGE=${TRAVIS_COMMIT_RANGE}"

set -xe

case ${TRAVIS_EVENT_TYPE} in
push)
    if [[ "${TRAVIS_BRANCH}" = master ]]
    then
        COMMIT_FROM=${TRAVIS_COMMIT_RANGE%...*}
        COMMIT_TO=${TRAVIS_COMMIT_RANGE#*...}

        if ! git cat-file -e "${COMMIT_FROM}^{commit}"
        then
            # A--B (missing)
            #  \__C
            # When you push force B to C, Travis set $TRAVIS_COMMIT_RANGE to "B...C"
            # B doesn't exist anymore, so we cannot fetch, nor find merge-base.
            # Since we cannot find common ancestor(A), we should do full check.
            echo "Don't skip for force push (maybe)"
            changed
        fi

        if ! git merge-base --is-ancestor "${COMMIT_FROM}" "${COMMIT_TO}"
        then
            # A--B
            #  \__C
            # It is force push but now we can find B
            echo "Don't skip for force push"
            changed
        fi

        # A--B--C
        # Branch was forwarded A to B, or B to C. $TRAVIS_COMMIT_RANGE will be A...B or B...C
        # NOTE:
        #   When job for A->B contains non-target changes, and didn't finished yet,
        #   a job B->C which only contains target changes will automatically cancel A->B
        #   and can report B->C to success.
        #   TODO: disable auto cancel on master
        echo "Forward push"
        COMMIT_RANGE=${TRAVIS_COMMIT_RANGE}
    else
        # Whether it was force push or forward push,
        # we can find common ancestor of master and the branch.
        echo "Branch push"
        git fetch origin master:master;
        BASE=$(git merge-base master "${TRAVIS_COMMIT}")
        COMMIT_RANGE="${BASE}...${TRAVIS_COMMIT}"
    fi
    ;;
pull_request)
    # $TRAVIS_COMMIT_RANGE will "MERGE_BASE...BRANCH"
    echo "Pull request"
    COMMIT_RANGE=${TRAVIS_COMMIT_RANGE}
    ;;
*)
    echo "Don't skip for api, cron event"
    changed
    ;;
esac

git log --oneline --decorate --all --graph | head -n 10;
echo "Check changes for: ${COMMIT_RANGE}"
if ! git diff --name-only "${COMMIT_RANGE}" | grep -qvE "*.md"
then
    echo "Only markdown files were updated, or there's no change, not running the CI."
    unchanged
fi

if ! git diff --name-only "${COMMIT_RANGE}" | grep -qE "$1"
then
    echo "'$1' were not updated, or there's no change, not running the CI."
    unchanged
fi

changed
